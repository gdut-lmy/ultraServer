// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_protobuf.proto

#include "rpc_protobuf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace ultraRPC {
class ultraProtocol_MsgContentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ultraProtocol_MsgContent> _instance;
} _ultraProtocol_MsgContent_default_instance_;
class ultraProtocolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ultraProtocol> _instance;
} _ultraProtocol_default_instance_;
}  // namespace ultraRPC
static void InitDefaultsscc_info_ultraProtocol_rpc_5fprotobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ultraRPC::_ultraProtocol_default_instance_;
    new (ptr) ::ultraRPC::ultraProtocol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ultraRPC::ultraProtocol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ultraProtocol_rpc_5fprotobuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ultraProtocol_rpc_5fprotobuf_2eproto}, {}};

static void InitDefaultsscc_info_ultraProtocol_MsgContent_rpc_5fprotobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ultraRPC::_ultraProtocol_MsgContent_default_instance_;
    new (ptr) ::ultraRPC::ultraProtocol_MsgContent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ultraRPC::ultraProtocol_MsgContent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ultraProtocol_MsgContent_rpc_5fprotobuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ultraProtocol_MsgContent_rpc_5fprotobuf_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rpc_5fprotobuf_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_rpc_5fprotobuf_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rpc_5fprotobuf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rpc_5fprotobuf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ultraRPC::ultraProtocol_MsgContent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ultraRPC::ultraProtocol_MsgContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ultraRPC::ultraProtocol_MsgContent, content_),
  0,
  PROTOBUF_FIELD_OFFSET(::ultraRPC::ultraProtocol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ultraRPC::ultraProtocol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ultraRPC::ultraProtocol, magic_),
  PROTOBUF_FIELD_OFFSET(::ultraRPC::ultraProtocol, version_),
  PROTOBUF_FIELD_OFFSET(::ultraRPC::ultraProtocol, sequence_id_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::ultraRPC::ultraProtocol_MsgContent)},
  { 7, 15, sizeof(::ultraRPC::ultraProtocol)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ultraRPC::_ultraProtocol_MsgContent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ultraRPC::_ultraProtocol_default_instance_),
};

const char descriptor_table_protodef_rpc_5fprotobuf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022rpc_protobuf.proto\022\010ultraRPC\"\250\003\n\rultra"
  "Protocol\022\r\n\005MAGIC\030\001 \001(\005\022\017\n\007VERSION\030\002 \001(\005"
  "\022\023\n\013SEQUENCE_ID\030\003 \002(\r\032\035\n\nMsgContent\022\017\n\007C"
  "ONTENT\030\001 \001(\t\"\302\002\n\007MsgType\022\024\n\020HEARTBEAT_PA"
  "CKET\020\000\022\020\n\014RPC_PROVIDER\020\001\022\020\n\014RPC_CONSUMER"
  "\020\003\022\017\n\013RPC_REQUEST\020\004\022\020\n\014RPC_RESPONSE\020\005\022\026\n"
  "\022RPC_METHOD_REQUEST\020\006\022\027\n\023RPC_METHOD_RESP"
  "ONSE\020\007\022\030\n\024RPC_SERVICE_REGISTER\020\010\022!\n\035RPC_"
  "SERVICE_REGISTER_RESPONSE\020\t\022\030\n\024RPC_SERVI"
  "CE_DISCOVER\020\n\022!\n\035RPC_SERVICE_DISCOVER_RE"
  "SPONSE\020\013\022\026\n\022RPC_PUBSUB_REQUEST\020\014\022\027\n\023RPC_"
  "PUBSUB_RESPONSE\020\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rpc_5fprotobuf_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rpc_5fprotobuf_2eproto_sccs[2] = {
  &scc_info_ultraProtocol_rpc_5fprotobuf_2eproto.base,
  &scc_info_ultraProtocol_MsgContent_rpc_5fprotobuf_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rpc_5fprotobuf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_5fprotobuf_2eproto = {
  false, false, descriptor_table_protodef_rpc_5fprotobuf_2eproto, "rpc_protobuf.proto", 457,
  &descriptor_table_rpc_5fprotobuf_2eproto_once, descriptor_table_rpc_5fprotobuf_2eproto_sccs, descriptor_table_rpc_5fprotobuf_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_rpc_5fprotobuf_2eproto::offsets,
  file_level_metadata_rpc_5fprotobuf_2eproto, 2, file_level_enum_descriptors_rpc_5fprotobuf_2eproto, file_level_service_descriptors_rpc_5fprotobuf_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rpc_5fprotobuf_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rpc_5fprotobuf_2eproto)), true);
namespace ultraRPC {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ultraProtocol_MsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_5fprotobuf_2eproto);
  return file_level_enum_descriptors_rpc_5fprotobuf_2eproto[0];
}
bool ultraProtocol_MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ultraProtocol_MsgType ultraProtocol::HEARTBEAT_PACKET;
constexpr ultraProtocol_MsgType ultraProtocol::RPC_PROVIDER;
constexpr ultraProtocol_MsgType ultraProtocol::RPC_CONSUMER;
constexpr ultraProtocol_MsgType ultraProtocol::RPC_REQUEST;
constexpr ultraProtocol_MsgType ultraProtocol::RPC_RESPONSE;
constexpr ultraProtocol_MsgType ultraProtocol::RPC_METHOD_REQUEST;
constexpr ultraProtocol_MsgType ultraProtocol::RPC_METHOD_RESPONSE;
constexpr ultraProtocol_MsgType ultraProtocol::RPC_SERVICE_REGISTER;
constexpr ultraProtocol_MsgType ultraProtocol::RPC_SERVICE_REGISTER_RESPONSE;
constexpr ultraProtocol_MsgType ultraProtocol::RPC_SERVICE_DISCOVER;
constexpr ultraProtocol_MsgType ultraProtocol::RPC_SERVICE_DISCOVER_RESPONSE;
constexpr ultraProtocol_MsgType ultraProtocol::RPC_PUBSUB_REQUEST;
constexpr ultraProtocol_MsgType ultraProtocol::RPC_PUBSUB_RESPONSE;
constexpr ultraProtocol_MsgType ultraProtocol::MsgType_MIN;
constexpr ultraProtocol_MsgType ultraProtocol::MsgType_MAX;
constexpr int ultraProtocol::MsgType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ultraProtocol_MsgContent::InitAsDefaultInstance() {
}
class ultraProtocol_MsgContent::_Internal {
 public:
  using HasBits = decltype(std::declval<ultraProtocol_MsgContent>()._has_bits_);
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ultraProtocol_MsgContent::ultraProtocol_MsgContent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ultraRPC.ultraProtocol.MsgContent)
}
ultraProtocol_MsgContent::ultraProtocol_MsgContent(const ultraProtocol_MsgContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_content()) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_content(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ultraRPC.ultraProtocol.MsgContent)
}

void ultraProtocol_MsgContent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ultraProtocol_MsgContent_rpc_5fprotobuf_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ultraProtocol_MsgContent::~ultraProtocol_MsgContent() {
  // @@protoc_insertion_point(destructor:ultraRPC.ultraProtocol.MsgContent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ultraProtocol_MsgContent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ultraProtocol_MsgContent::ArenaDtor(void* object) {
  ultraProtocol_MsgContent* _this = reinterpret_cast< ultraProtocol_MsgContent* >(object);
  (void)_this;
}
void ultraProtocol_MsgContent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ultraProtocol_MsgContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ultraProtocol_MsgContent& ultraProtocol_MsgContent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ultraProtocol_MsgContent_rpc_5fprotobuf_2eproto.base);
  return *internal_default_instance();
}


void ultraProtocol_MsgContent::Clear() {
// @@protoc_insertion_point(message_clear_start:ultraRPC.ultraProtocol.MsgContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    content_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ultraProtocol_MsgContent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string CONTENT = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ultraRPC.ultraProtocol.MsgContent.CONTENT");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ultraProtocol_MsgContent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ultraRPC.ultraProtocol.MsgContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string CONTENT = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ultraRPC.ultraProtocol.MsgContent.CONTENT");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ultraRPC.ultraProtocol.MsgContent)
  return target;
}

size_t ultraProtocol_MsgContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ultraRPC.ultraProtocol.MsgContent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string CONTENT = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ultraProtocol_MsgContent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ultraRPC.ultraProtocol.MsgContent)
  GOOGLE_DCHECK_NE(&from, this);
  const ultraProtocol_MsgContent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ultraProtocol_MsgContent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ultraRPC.ultraProtocol.MsgContent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ultraRPC.ultraProtocol.MsgContent)
    MergeFrom(*source);
  }
}

void ultraProtocol_MsgContent::MergeFrom(const ultraProtocol_MsgContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ultraRPC.ultraProtocol.MsgContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_content()) {
    _internal_set_content(from._internal_content());
  }
}

void ultraProtocol_MsgContent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ultraRPC.ultraProtocol.MsgContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ultraProtocol_MsgContent::CopyFrom(const ultraProtocol_MsgContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ultraRPC.ultraProtocol.MsgContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ultraProtocol_MsgContent::IsInitialized() const {
  return true;
}

void ultraProtocol_MsgContent::InternalSwap(ultraProtocol_MsgContent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ultraProtocol_MsgContent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ultraProtocol::InitAsDefaultInstance() {
}
class ultraProtocol::_Internal {
 public:
  using HasBits = decltype(std::declval<ultraProtocol>()._has_bits_);
  static void set_has_magic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sequence_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

ultraProtocol::ultraProtocol(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ultraRPC.ultraProtocol)
}
ultraProtocol::ultraProtocol(const ultraProtocol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&magic_, &from.magic_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_id_) -
    reinterpret_cast<char*>(&magic_)) + sizeof(sequence_id_));
  // @@protoc_insertion_point(copy_constructor:ultraRPC.ultraProtocol)
}

void ultraProtocol::SharedCtor() {
  ::memset(&magic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_id_) -
      reinterpret_cast<char*>(&magic_)) + sizeof(sequence_id_));
}

ultraProtocol::~ultraProtocol() {
  // @@protoc_insertion_point(destructor:ultraRPC.ultraProtocol)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ultraProtocol::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ultraProtocol::ArenaDtor(void* object) {
  ultraProtocol* _this = reinterpret_cast< ultraProtocol* >(object);
  (void)_this;
}
void ultraProtocol::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ultraProtocol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ultraProtocol& ultraProtocol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ultraProtocol_rpc_5fprotobuf_2eproto.base);
  return *internal_default_instance();
}


void ultraProtocol::Clear() {
// @@protoc_insertion_point(message_clear_start:ultraRPC.ultraProtocol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&magic_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_id_) -
        reinterpret_cast<char*>(&magic_)) + sizeof(sequence_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ultraProtocol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 MAGIC = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_magic(&has_bits);
          magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 VERSION = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 SEQUENCE_ID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sequence_id(&has_bits);
          sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ultraProtocol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ultraRPC.ultraProtocol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 MAGIC = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_magic(), target);
  }

  // optional int32 VERSION = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  // required uint32 SEQUENCE_ID = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sequence_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ultraRPC.ultraProtocol)
  return target;
}

size_t ultraProtocol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ultraRPC.ultraProtocol)
  size_t total_size = 0;

  // required uint32 SEQUENCE_ID = 3;
  if (_internal_has_sequence_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 MAGIC = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_magic());
    }

    // optional int32 VERSION = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ultraProtocol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ultraRPC.ultraProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  const ultraProtocol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ultraProtocol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ultraRPC.ultraProtocol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ultraRPC.ultraProtocol)
    MergeFrom(*source);
  }
}

void ultraProtocol::MergeFrom(const ultraProtocol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ultraRPC.ultraProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      magic_ = from.magic_;
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_id_ = from.sequence_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ultraProtocol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ultraRPC.ultraProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ultraProtocol::CopyFrom(const ultraProtocol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ultraRPC.ultraProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ultraProtocol::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ultraProtocol::InternalSwap(ultraProtocol* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ultraProtocol, sequence_id_)
      + sizeof(ultraProtocol::sequence_id_)
      - PROTOBUF_FIELD_OFFSET(ultraProtocol, magic_)>(
          reinterpret_cast<char*>(&magic_),
          reinterpret_cast<char*>(&other->magic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ultraProtocol::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ultraRPC
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ultraRPC::ultraProtocol_MsgContent* Arena::CreateMaybeMessage< ::ultraRPC::ultraProtocol_MsgContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ultraRPC::ultraProtocol_MsgContent >(arena);
}
template<> PROTOBUF_NOINLINE ::ultraRPC::ultraProtocol* Arena::CreateMaybeMessage< ::ultraRPC::ultraProtocol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ultraRPC::ultraProtocol >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
